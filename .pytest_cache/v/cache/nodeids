[
  "bob/bob_test.py::BobTest::test_alternate_silence",
  "bob/bob_test.py::BobTest::test_asking_a_numeric_question",
  "bob/bob_test.py::BobTest::test_asking_a_question",
  "bob/bob_test.py::BobTest::test_asking_gibberish",
  "bob/bob_test.py::BobTest::test_ending_with_whitespace",
  "bob/bob_test.py::BobTest::test_forceful_question",
  "bob/bob_test.py::BobTest::test_multiple_line_question",
  "bob/bob_test.py::BobTest::test_no_letters",
  "bob/bob_test.py::BobTest::test_non_letters_with_question",
  "bob/bob_test.py::BobTest::test_non_question_ending_with_whitespace",
  "bob/bob_test.py::BobTest::test_other_whitespace",
  "bob/bob_test.py::BobTest::test_prattling_on",
  "bob/bob_test.py::BobTest::test_prolonged_silence",
  "bob/bob_test.py::BobTest::test_question_with_no_letters",
  "bob/bob_test.py::BobTest::test_shouting",
  "bob/bob_test.py::BobTest::test_shouting_gibberish",
  "bob/bob_test.py::BobTest::test_shouting_numbers",
  "bob/bob_test.py::BobTest::test_shouting_with_no_exclamation_mark",
  "bob/bob_test.py::BobTest::test_shouting_with_special_characters",
  "bob/bob_test.py::BobTest::test_silence",
  "bob/bob_test.py::BobTest::test_starting_with_whitespace",
  "bob/bob_test.py::BobTest::test_statement_containing_question_mark",
  "bob/bob_test.py::BobTest::test_stating_something",
  "bob/bob_test.py::BobTest::test_talking_forcefully",
  "bob/bob_test.py::BobTest::test_using_acronyms_in_regular_speech",
  "hamming/hamming_test.py::HammingTest::test_complete_distance_in_single_nucleotide_strands",
  "hamming/hamming_test.py::HammingTest::test_complete_distance_in_small_strands",
  "hamming/hamming_test.py::HammingTest::test_disallow_first_strand_longer",
  "hamming/hamming_test.py::HammingTest::test_disallow_second_strand_longer",
  "hamming/hamming_test.py::HammingTest::test_empty_strands",
  "hamming/hamming_test.py::HammingTest::test_identical_strands",
  "hamming/hamming_test.py::HammingTest::test_large_distance",
  "hamming/hamming_test.py::HammingTest::test_large_distance_in_off_by_one_strand",
  "hamming/hamming_test.py::HammingTest::test_long_identical_strands",
  "hamming/hamming_test.py::HammingTest::test_non_unique_character_in_first_strand",
  "hamming/hamming_test.py::HammingTest::test_non_unique_character_in_second_strand",
  "hamming/hamming_test.py::HammingTest::test_same_nucleotides_in_different_positions",
  "hamming/hamming_test.py::HammingTest::test_small_distance",
  "hamming/hamming_test.py::HammingTest::test_small_distance_in_long_strands",
  "hamming/hamming_test.py::HammingTest::test_small_distance_in_small_strands",
  "hello-world/hello_world_test.py::HelloWorldTest::test_hello",
  "leap/leap_test.py::LeapTest::test_year_divisible_by_100_not_divisible_by_400",
  "leap/leap_test.py::LeapTest::test_year_divisible_by_400",
  "leap/leap_test.py::LeapTest::test_year_divisible_by_4_not_divisible_by_100",
  "leap/leap_test.py::LeapTest::test_year_not_divisible_by_4",
  "pangram/pangram_test.py::PangramTest::test_another_missing_character",
  "pangram/pangram_test.py::PangramTest::test_missing_character_x",
  "pangram/pangram_test.py::PangramTest::test_missing_letters_replaced_by_numbers",
  "pangram/pangram_test.py::PangramTest::test_pangram_with_mixedcase_and_punctuation",
  "pangram/pangram_test.py::PangramTest::test_pangram_with_numbers",
  "pangram/pangram_test.py::PangramTest::test_pangram_with_only_lower_case",
  "pangram/pangram_test.py::PangramTest::test_pangram_with_underscores",
  "pangram/pangram_test.py::PangramTest::test_recognizes_a_perfect_lower_case_pangram",
  "pangram/pangram_test.py::PangramTest::test_sentence_empty",
  "pangram/pangram_test.py::PangramTest::test_upper_and_lower_case_versions_of_the_same_character",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_negative_with_negative_denominator",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_positive_negative_numerator_denominator",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_absolute_value_of_zero",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_opposite",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_positive_and_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_add_two_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_convert_fraction_to_integers",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_by_one",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_positive_by_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_two_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_divide_two_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_euclidiean_algo",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_by_one",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_by_zero",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_negative_by_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_reciprocal",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_two_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_multiply_two_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_to_a_positive_integer_power",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_negative_rational_to_the_power_of_zero",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_to_a_positive_integer_power",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_positive_rational_to_the_power_of_zero",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_negative_rational",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_positive_rational",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_a_real_number_to_a_zero_rational",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_one_to_an_integer_power",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_raise_zero_to_an_integer_power",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_integer",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_one",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_positive",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_rational_with_negative_denominator",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_reduce_zero",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_from_self",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_positive_and_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_two_negative",
  "rational-numbers/rational_numbers_test.py::RationalNumbersTest::test_subtract_two_positive",
  "two-fer/two_fer_test.py::TwoFerTest::test_a_name_given",
  "two-fer/two_fer_test.py::TwoFerTest::test_another_name_given",
  "two-fer/two_fer_test.py::TwoFerTest::test_no_name_given"
]